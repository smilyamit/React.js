#0 All event listener in below links used in buttons for mouse, keyboard
https://reactjs.org/docs/events.html

#1 some  best Reacts cheatsheet links
https://devhints.io/react

*React Component Lifecycle Methods Cheatsheet
https://dev.to/bunlong/react-component-lifecycle-methods-cheatsheet-23gi

*React Component Lifecycle Hooks Cheatsheet
https://dev.to/bunlong/react-component-lifecycle-hooks-cheatsheet-41c3

# What we will learn
*React Basic: components, event, templates, props & forms
* React Router: route, route parameter, redirects
* Redux- Stores, action and reducer


In React class based component must have one function, let say render() {}
also inside render there is jsx format (js +html) inside return()
note: inside return generally  there must be only one root element (like only one pair div )
* always rememebr ReactDOM (R should be capital, DOM all letter should be capital)
*https://www.w3schools.com/REACT/default.asp (react basic)

#JSX
JSX stands for JavaScript XML.
JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or 
appendChild() methods. JSX converts HTML tags into react elements.

You are not required to use JSX, but JSX makes it easier to write React applications.
FOr eg

using JSX
const myelement = <h1>I Love JSX!</h1>;
ReactDOM.render(myelement, document.getElementById('root'));

Without JSX (a bit long, we have to use React.getElement)
const myelement = React.createElement('h1', {}, 'I do not use JSX!');
ReactDOM.render(myelement, document.getElementById('root'));

** Arrow function has special behaviour when it comes around "this" keyword. They bind the value of this whatever 'this' is 
outside the function (in vs code eg state is outside the fun)

Note:
function display(){
 console.log(this); // 'this' will point to the global object
}

display(); 

** state vs prop
=>Props are immutable i.e. once set the props cannot be changed, while State is an observable object that is to be used to
hold data that may change over time and to control the behavior after each change.
=> States can only be used in Class Components while Props don't have this limitation.

#container Component with states vs UI Component without state made by function (v-15)
eg https://www.youtube.com/watch?v=o4GCcSn-hEw&list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG&index=15



##Lifecycle of React
http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

#why id is required in making list inside app.js
=>react expects a unique key on every surrounding element that we return inside this map function right here whenwe output 
them to the browser so that can identify each individual item and perform the Dom manipulations

#div.todos.collection how it did it automatically update?
=>that is the feature of emmet extention
*paranthesis will invoke the function automatically so we have to use it with arrow function to have control on it

prop vs State detail
Prop(property):
Assigning prop(property) value to component is same like assign  <a href= "value">link</a> 
eg <Component property="value"/>
https://www.youtube.com/watch?time_continue=1&v=KvapOdsFK5A&feature=emb_logo
https://www.freecodecamp.org/news/react-js-for-beginners-props-state-explained/ (very vey imp)

#React Router
Router in react server act as temporary server for suppying all other pages associated with home page(about, contact)
Router in react intercept the request of browser and supply the required component (module) without contacting server

#new shortcut to write html code in react
for eg for div with classname container just write
div.container (enter)
for nav with wrapper with red color
nav.wrapper.red.darken-3 (enter)

ul= unordered list
a=anchor tag

##What are React Components?
React components are independent and reusable code. They are the building blocks of any React application. 
Components serve the same purpose as JavaScript functions, but work individually to return JSX code as elements for our UI

#Diff between functional component and class component
https://www.freecodecamp.org/news/functional-components-vs-class-components-in-react/
A)Functional Component
1)stateless” components as they simply accept data and display them in some form; that is they are mainly responsible for 
rendering UI (example, a Button component)
2)React lifecycle methods (for example, componentDidMount) cannot be used in functional components.
3)Functional components can accept and use props.

B)class component
Class components make use of ES6 class and extend the Component class in React.
React lifecycle methods can be used inside class components (for example, componentDidMount)
You pass props down to class components and access them with this.props

#################################

#Diff between Component and Container
Component is part of the React API. A Component is a class or function that describes part of a React UI.

Container is an informal term for a React component that is connect-ed to a redux store. Containers receive Redux state 
updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child 
components.

#Reducer workflow
components --->Dispatch Action---->Reducer------>Redux(A central datastore)
work:
components: component dispatch an action eg: ADD_POST
Dispatch Action: action passsed to Reducer
Reducer: It update the central state
Redux: Components suscribe to changes-props


